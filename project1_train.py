# -*- coding: utf-8 -*-
"""Projet_rains_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U4p-4st7S7WGO_cSMWGbvLS2WLvr2Nqy
"""

# Import des modules pour le projet
import pandas as pd
import numpy as np
import os
import math
import pickle

from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from scipy import stats
from sklearn.linear_model import LogisticRegression

from collections import Counter
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score, f1_score

from sklearn.ensemble import RandomForestRegressor
from sklearn.naive_bayes import BernoulliNB
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestRegressor
from scipy.stats import chi2_contingency
from sklearn.metrics import classification_report
from sklearn.model_selection import cross_val_score, StratifiedKFold
import lightgbm as lgb
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

from sklearn.preprocessing import StandardScaler
import warnings

warnings.filterwarnings("ignore")


def get_data():

    # Chargement du fichier rains dans le dataframe rains
    rains = pd.read_csv(
        "https://assets-datascientest.s3-eu-west-1.amazonaws.com/de/total/rains.csv"
    )

    rains = rains.drop(["Date"], axis=1)
    rains = rains.drop(["Location"], axis=1)

    # On supprime les lignes où RainToday et RainTomorrow ont une valeur NaN pour plus de pertinence (on ne peut pas savoir si il a plu ou non)
    rains = rains.dropna(
        axis=0, how="any", subset=["RainToday", "RainTomorrow"]
    )

    # On supprime également les lignes avec des temperatures non renseignées car nous estimons que les températures sont des éléments importants dans la prédiction
    rains = rains.dropna(axis=0, how="any", subset=["Temp9am", "Temp3pm"])

    # Remplacer les valeurs manquantes pour les variables numériques suivant l'analyse faite avec describe sur les champs numériques plus haut
    from sklearn.impute import SimpleImputer

    valeur1 = SimpleImputer(missing_values=np.nan, strategy="mean")
    valeur2 = SimpleImputer(missing_values=np.nan, strategy="median")
    rains[["Evaporation"]] = valeur2.fit_transform(rains[["Evaporation"]])
    rains[["Sunshine"]] = valeur1.fit_transform(rains[["Sunshine"]])
    rains[["Cloud3pm"]] = valeur1.fit_transform(rains[["Cloud3pm"]])
    rains[["Cloud9am"]] = valeur1.fit_transform(rains[["Cloud9am"]])
    rains[["Pressure9am"]] = valeur1.fit_transform(rains[["Pressure9am"]])
    rains[["Pressure3pm"]] = valeur1.fit_transform(rains[["Pressure3pm"]])

    # On remplace les NaN des restant des variables numérique par la moyenne car plusieurs ont comme valeur la plus fréquente la valeur NaN. On ne peut donc pas utiliser le mode pour les remplacer
    rains = rains.fillna(rains.mean())

    # On remplace les valeurs manquantes des variables catégoriales WindGustDir, WindDir9am, WindDir3pm par leur mode
    rains["WindGustDir"] = rains["WindGustDir"].fillna(
        rains["WindGustDir"].mode()[0]
    )
    rains["WindDir9am"] = rains["WindDir9am"].fillna(
        rains["WindDir9am"].mode()[0]
    )
    rains["WindDir3pm"] = rains["WindDir3pm"].fillna(
        rains["WindDir3pm"].mode()[0]
    )

    # On va binariser les variables de type non numérique
    from sklearn.preprocessing import LabelEncoder

    for c in rains.columns:
        if rains[c].dtype == "object":
            lbl = LabelEncoder()
            lbl.fit(list(rains[c].values))
            rains[c] = lbl.transform(rains[c].values)

    X = rains.drop(["RainTomorrow"], axis=1)
    y = rains["RainTomorrow"]

    scaler = StandardScaler()
    X_scaled = scaler.fit(X).transform(X)

    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y, test_size=0.2, random_state=2, stratify=y
    )

    return X_train, X_test, y_train, y_test


if __name__ == "__main__":

    X_train, X_test, y_train, y_test = get_data()

    params_lgb = {
        "colsample_bytree": 0.95,
        "max_depth": 16,
        "min_split_gain": 0.1,
        "n_estimators": 200,
        "num_leaves": 50,
        "reg_alpha": 1.2,
        "reg_lambda": 1.2,
        "subsample": 0.95,
        "subsample_freq": 20,
    }

    models = [
        LogisticRegression(),
        LinearDiscriminantAnalysis(),
        KNeighborsClassifier(),
        GaussianNB(),
        DecisionTreeClassifier(),
        SVC(),
        lgb.LGBMClassifier(**params_lgb),
        RandomForestClassifier(n_estimators=100, max_depth=4, random_state=0),
    ]

    # Train models and save to files
    for model in models:
        print(f"Model: {type(model).__name__}")

        model.fit(X_train, y_train)

        with open(f"{type(model).__name__}_trained", "wb") as file:
            pickle.dump(model, file)
